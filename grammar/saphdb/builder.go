package saphdb

import (
	"fmt"
	"strings"

	"github.com/yaoapp/xun/dbal"
	"github.com/yaoapp/xun/utils"
)

// GetDefaultValue get the default value
func (grammarSQL Hdb) GetDefaultValue(column *dbal.Column) string {
	defaultValue := ""
	if column.Default != nil {
		if value, ok := column.Default.(string); ok {
			defaultValue = grammarSQL.VAL(value)
		} else {
			typ, has := grammarSQL.Types[column.Type]
			if !has {
				typ = "INTEGER"
			}
			v := column.Default
			switch v.(type) {
			case int, int16, int32, int64:

				defaultValue = fmt.Sprintf("%d", v)
				switch typ {
				case "DECIMAL", "DOUBLE", "FLOAT":
					v = float64(v.(int64))
					defaultValue = fmt.Sprintf("%f", v)
				}

				break
			case float32, float64:

				defaultValue = fmt.Sprintf("%f", v)
				switch typ {
				case "SMALLINT", "BIGINT", "INTEGER":
					v = int64(v.(float64))
					defaultValue = fmt.Sprintf("%d", v)
				}
				break
			default:
				defaultValue = fmt.Sprintf("%v", v)
			}
			// defaultValue = fmt.Sprintf("%v", column.Default)
		}
	}

	if column.DefaultRaw != "" {
		defaultValue = column.DefaultRaw
	}
	return utils.GetIF(defaultValue != "", fmt.Sprintf("DEFAULT %s", defaultValue), "").(string)
}

// SQLAddColumn return the add column sql for table create
func (grammarSQL Hdb) SQLAddColumn(column *dbal.Column) string {
	types := grammarSQL.Types
	quoter := grammarSQL.Quoter

	// `id` bigint(20) unsigned NOT NULL,
	typ, has := types[column.Type]
	if !has {
		typ = "NVARCHAR"
	}

	if typ == "FLOAT" {
		if column.Precision != nil {
			typ = fmt.Sprintf("%s(%d)", typ, utils.IntVal(column.Precision))
		}
	}
	decimalTypes := []string{"DECIMAL"}

	if column.Precision != nil && column.Scale != nil && utils.StringHave(decimalTypes, typ) {
		typ = fmt.Sprintf("%s(%d,%d)", typ, utils.IntVal(column.Precision), utils.IntVal(column.Scale))
	} else if strings.Contains(typ, "TIMESTAMP(%d)") || strings.Contains(typ, "TIME(%d)") {
		DateTimePrecision := utils.IntVal(column.DateTimePrecision, 0)
		typ = fmt.Sprintf(typ, DateTimePrecision)
	} else if column.Length != nil {
		typ = fmt.Sprintf("%s(%d)", typ, utils.IntVal(column.Length))
	}

	unsigned := ""
	nullable := utils.GetIF(column.Nullable, "NULL", "NOT NULL").(string)

	defaultValue := grammarSQL.GetDefaultValue(column)
	// comment := utils.GetIF(utils.StringVal(column.Comment) != "", fmt.Sprintf("COMMENT %s", quoter.VAL(column.Comment)), "").(string)

	// comment := utils.GetIF(utils.StringVal(column.Comment) != "", fmt.Sprintf("COMMENT %s", quoter.VAL(column.Comment)), "").(string)
	// collation := utils.GetIF(utils.StringVal(column.Collation) != "", fmt.Sprintf("COLLATE %s", utils.StringVal(column.Collation)), "").(string)
	extra := utils.GetIF(utils.StringVal(column.Extra) != "", "GENERATED BY DEFAULT AS IDENTITY", "")
	if utils.StringVal(column.Extra) != "" {
		if typ == "BIGINT" {
			// typ = "BIGSERIAL"
		} else if typ == "SMALLINT" {
			// typ = "SMALLSERIAL"
		} else {
			// typ = "SERIAL"
		}
		nullable = ""
		defaultValue = ""
	}

	if typ == "IPADDRESS" { // ipAddress
		typ = "integer"
	} else if typ == "YEAR" { // 2021 -1046 smallInt (2-byte)
		typ = "SMALLINT"
	}

	// JSON type
	if typ == "JSON" || typ == "JSONB" {

		typ = "TEXT"
	} else if typ == "UUID" { // UUID
		// comment = fmt.Sprintf("COMMENT %s", quoter.VAL(fmt.Sprintf("T:%s|%s", column.Type, utils.StringVal(column.Comment))))
		typ = "NVARCHAR(36)"
	} else if typ == "IPADDRESS" { // ipAddress
		// comment = fmt.Sprintf("COMMENT %s", quoter.VAL(fmt.Sprintf("T:%s|%s", column.Type, utils.StringVal(column.Comment))))
		typ = "integer"
	} else if typ == "MACADDRESS" { // macAddress 08:00:2b:01:02:03:04:05  bigint unsigned (8 bytes)
		// comment = fmt.Sprintf("COMMENT %s", quoter.VAL(fmt.Sprintf("T:%s|%s", column.Type, utils.StringVal(column.Comment))))
		typ = "BIGINT"
		unsigned = "UNSIGNED"
	} else if typ == "YEAR" { // 2021 -1046 smallInt (2-byte)
		// comment = fmt.Sprintf("COMMENT %s", quoter.VAL(fmt.Sprintf("T:%s|%s", column.Type, utils.StringVal(column.Comment))))
		typ = "SMALLINT"
	} else if typ == "ENUM" {
		maxlen := 1
		for _, s := range column.Option {
			if len(s) > maxlen {
				maxlen = len(s)
			}
		}
		typ = fmt.Sprintf("NVARCHAR(%d)", maxlen)
		// typ = "NVARCHAR"
	}

	// default now() -> DEFAULT CURRENT_TIMESTAMP(%d) / DEFAULT CURRENT_TIMESTAMP
	if strings.Contains(column.Type, "timestamp") && (defaultValue != "" || (defaultValue == "" && column.Nullable == false)) {
		if strings.Contains(strings.ToLower(defaultValue), "now()") || defaultValue == "" {
			// if column.DateTimePrecision != nil {
			// 	defaultValue = fmt.Sprintf("DEFAULT CURRENT_TIMESTAMP(%d)", *column.DateTimePrecision)
			// } else {
			defaultValue = "DEFAULT CURRENT_TIMESTAMP"
			// }
		}
	}

	sql := fmt.Sprintf(
		"%s %s %s %s %s %s",
		quoter.ID(column.Name), typ, unsigned, nullable, defaultValue, extra)

	sql = strings.Trim(sql, " ")
	return sql
}

// SQLAddComment return the add comment sql for table create
func (grammarSQL Hdb) SQLAddComment(column *dbal.Column) string {
	comment := utils.GetIF(
		utils.StringVal(column.Comment) != "",
		fmt.Sprintf(
			"COMMENT on column %s.%s is %s;",
			grammarSQL.ID(column.TableName),
			grammarSQL.ID(column.Name),
			grammarSQL.VAL(column.Comment),
		), "").(string)

	mappingTypes := []string{"ipAddress", "year"}
	if utils.StringHave(mappingTypes, column.Type) {
		comment = fmt.Sprintf("COMMENT on column %s.%s is %s;",
			grammarSQL.ID(column.TableName),
			grammarSQL.ID(column.Name),
			grammarSQL.VAL(fmt.Sprintf("T:%s|%s", column.Type, utils.StringVal(column.Comment))),
		)
	}
	return comment
}

// SQLAddIndex  return the add index sql for table create
func (grammarSQL Hdb) SQLAddIndex(index *dbal.Index) string {
	quoter := grammarSQL.Quoter
	indexTypes := grammarSQL.IndexTypes
	typ, has := indexTypes[index.Type]
	if !has {
		typ = "KEY"
	}

	// UNIQUE KEY `unionid` (`unionid`) COMMENT 'xxxx'
	// IS JSON
	columns := []string{}
	isJSON := false
	for _, column := range index.Columns {
		columns = append(columns, quoter.ID(column.Name))
		if column.Type == "json" || column.Type == "jsonb" {
			isJSON = true
		}
	}
	if isJSON {
		return ""
	}

	comment := ""
	if index.Comment != nil {
		comment = fmt.Sprintf("COMMENT %s", quoter.VAL(index.Comment))
	}
	name := quoter.ID(fmt.Sprintf("%s_%s", index.TableName, index.Name))
	sql := ""
	if typ == "PRIMARY KEY" {
		sql = fmt.Sprintf(
			"%s (%s) %s",
			typ, strings.Join(columns, ","), comment)
	} else {
		sql = fmt.Sprintf(
			"CREATE %s %s ON %s (%s)",
			typ, name, quoter.ID(index.TableName), strings.Join(columns, ","))
	}
	return sql
}

// SQLAddPrimary return the add primary key sql for table create
func (grammarSQL Hdb) SQLAddPrimary(primary *dbal.Primary) string {
	quoter := grammarSQL.Quoter

	// PRIMARY KEY `unionid` (`unionid`) COMMENT 'xxxx'
	columns := []string{}
	for _, column := range primary.Columns {
		columns = append(columns, quoter.ID(column.Name))
	}

	sql := fmt.Sprintf(
		// "CONSTRAINT %s PRIMARY KEY (%s)",
		"PRIMARY KEY (%s)",
		// grammarSQL.ID(primary.Name),
		strings.Join(columns, ","))

	return sql
}
